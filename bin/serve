#!/usr/bin/env bash
set -euo pipefail
source "$(dirname "$0")/_lib.sh"
proj="${1:-}"
arg2="${2:-}"
arg3="${3:-}"
if [[ -z "$proj" ]]; then echo "usage: serve <project> [83|74] [port-from-range]"; exit 1; fi

# –†–∞–∑–æ–≤—ã–π –≤—ã–±–æ—Ä workspace (–≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç), –∏–Ω–∞—á–µ —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –ø–æ—Ä—Ç
port=""
case "$arg2" in
  83|8.3|8.3-cli|workspace83) export DEVBOX_PHP=83; port="$arg3" ;;
  74|7.4|7.4-cli|workspace74) export DEVBOX_PHP=74; port="$arg3" ;;
  "") ;;
  *) port="$arg2" ;;
esac

load_env; ensure_up
# –µ—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π APP_PORT, –∑–∞—Ç–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
[[ -z "$port" ]] && port="${APP_PORT:-}" || true
[[ -z "$port" ]] && port="$(freeport "$APP_PORT_RANGE")" || true
[[ -z "$port" ]] && { echo "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –≤ $APP_PORT_RANGE –∏ APP_PORT –Ω–µ –∑–∞–¥–∞–Ω"; exit 1; }

# –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∞ –ª–æ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
docker compose -f "$DEVBOX_DIR/docker-compose.yml" exec -T -u 0 "${WS_SERVICE}" bash -lc \
  'mkdir -p /var/log/devbox && chmod 0777 /var/log/devbox'

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ñ–∞–π–ª–∞ artisan
if ! docker compose -f "$DEVBOX_DIR/docker-compose.yml" exec -T "${WS_SERVICE}" bash -lc "test -d '/var/www/$proj'"; then
  echo "‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ /var/www/$proj –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å (–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∫ ${HOST_PROJECTS_DIR:-../})."
  exit 1
fi
if ! docker compose -f "$DEVBOX_DIR/docker-compose.yml" exec -T "${WS_SERVICE}" bash -lc "test -f '/var/www/$proj/artisan'"; then
  echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª artisan –≤ /var/www/$proj. –≠—Ç–æ —Ç–æ—á–Ω–æ Laravel‚Äë–ø—Ä–æ–µ–∫—Ç? –í—ã–ø–æ–ª–Ω–∏—Ç–µ composer create-project/install."
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (vendor)
if ! docker compose -f "$DEVBOX_DIR/docker-compose.yml" exec -T "${WS_SERVICE}" bash -lc "test -f '/var/www/$proj/vendor/autoload.php'"; then
  echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω '/var/www/$proj/vendor/autoload.php'. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: bin/composer $proj install"
  exit 1
fi

# –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º php -S (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –ª—é–±—ã—Ö –≤–µ—Ä—Å–∏–π Laravel)
if ! docker compose -f "$DEVBOX_DIR/docker-compose.yml" exec -T "${WS_SERVICE}" bash -lc "test -f '/var/www/$proj/public/index.php'"; then
  echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω '/var/www/$proj/public/index.php'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä–µ–Ω—å Laravel‚Äë–ø—Ä–æ–µ–∫—Ç–∞."
  exit 1
fi

dexd "/var/www/$proj" sh -lc \
  "log=/var/log/devbox/serve-${proj//\//_}-${port}.log; \
   : > \"\$log\"; \
   # —É–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   for pid in \$(ps -ef | grep -E '[p]hp .*artisan serve --host=0.0.0.0 --port=${port}' | awk '{print \$2}'); do cwd=\$(readlink -f /proc/\$pid/cwd 2>/dev/null||echo); [[ \"\$cwd\" == \"\$(pwd)\"* ]] && kill \"\$pid\" 2>/dev/null||true; done; \
   for pid in \$(ps -ef | grep -E '[p]hp -S 0.0.0.0:${port} -t public' | awk '{print \$2}'); do cwd=\$(readlink -f /proc/\$pid/cwd 2>/dev/null||echo); [[ \"\$cwd\" == \"\$(pwd)\"* ]] && kill \"\$pid\" 2>/dev/null||true; done; \
   if php artisan list >/dev/null 2>&1 && php artisan list | grep -qE '^\\s*serve\\s'; then \
     echo '[info] starting (artisan): php artisan serve --host=0.0.0.0 --port=${port}' >>\"\$log\"; \
     php artisan serve --host=0.0.0.0 --port=${port} >>\"\$log\" 2>&1; \
   else \
     echo '[info] starting (php -S): php -S 0.0.0.0:${port} -t public public/index.php' >>\"\$log\"; \
     php -S 0.0.0.0:${port} -t public public/index.php >>\"\$log\" 2>&1; \
   fi"
echo "‚úÖ Laravel (${proj}) ‚Üí http://localhost:${port}"
echo "üìù logs: $DEVBOX_DIR/logs/serve-${proj//\//_}-${port}.log"
# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ –≤—ã–≤–æ–¥ –ª–æ–≥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
dex "/var/www/$proj" sh -lc \
  "log=/var/log/devbox/serve-${proj//\//_}-${port}.log; \
   echo '[info] checking health on 127.0.0.1:${port}' >>\"\$log\"; \
   for i in {1..50}; do curl -fsS -o /dev/null http://127.0.0.1:${port} && { echo '[info] healthy' >>\"\$log\"; exit 0; }; sleep 0.2; done; \
   echo '‚ö†Ô∏è  –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–±—É—é fallback php -S' >>\"\$log\"; \
   for pid in \$(ps -ef | grep -E '[p]hp .*artisan serve --host=0.0.0.0 --port=${port}' | awk '{print \$2}'); do cwd=\$(readlink -f /proc/\$pid/cwd 2>/dev/null||echo); [[ \"\$cwd\" == \"\$(pwd)\"* ]] && kill \"\$pid\" 2>/dev/null||true; done; \
   php -S 0.0.0.0:${port} -t public public/index.php >>\"\$log\" 2>&1 & \
   for i in {1..50}; do curl -fsS -o /dev/null http://127.0.0.1:${port} && { echo '[info] healthy (fallback)' >>\"\$log\"; exit 0; }; sleep 0.2; done; \
   echo '‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ 127.0.0.1:${port}. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:'; \
   tail -n 120 \"\$log\" || true"
