#!/usr/bin/env bash
set -euo pipefail
source "$(dirname "$0")/_lib.sh"; load_env; ensure_up
proj="${1:-}"; port="${2:-}"
[[ -z "$proj" ]] && { echo "usage: vite <project> [port-from-${VITE_PORT_RANGE}]"; exit 1; }
# если порт не передан — пробуем фиксированный VITE_PORT, затем диапазон
[[ -z "$port" ]] && port="${VITE_PORT:-}" || true
[[ -z "$port" ]] && port="$(freeport "$VITE_PORT_RANGE")" || true
[[ -z "$port" ]] && { echo "❌ Нет свободных портов в $VITE_PORT_RANGE и VITE_PORT не задан"; exit 1; }

# гарантируем доступность каталога логов внутри контейнера
docker compose -f "$DEVBOX_DIR/docker-compose.yml" exec -T -u 0 workspace bash -lc 'mkdir -p /var/log/devbox && chmod 0777 /var/log/devbox'

# починим права на npm-кэш, если нужно
docker compose -f "$DEVBOX_DIR/docker-compose.yml" exec -T -u 0 workspace bash -lc '
  wd="/var/www/'"$proj"'";
  uid=$(stat -c %u "$wd" 2>/dev/null || echo 1000)
  gid=$(stat -c %g "$wd" 2>/dev/null || echo 1000)
  mkdir -p /home/dev/.npm
  chown -R "$uid:$gid" /home/dev/.npm 2>/dev/null || true
'

dexd "/var/www/$proj" sh -lc \
  "for pid in \$(ps -ef | grep -E '[n]ode .*vite' | awk '{print \$2}'); do cwd=\$(readlink -f /proc/\$pid/cwd 2>/dev/null||echo); [[ \"\$cwd\" == \"\$(pwd)\"* ]] && kill \"\$pid\" 2>/dev/null||true; done; \
   npm i >/dev/null 2>&1 || true; \
   npm run dev -- --host --strictPort --port ${port} \
     >>/var/log/devbox/vite-${proj//\//_}-${port}.log 2>&1"

echo "✅ Vite (${proj}) → http://localhost:${port}"
echo "📝 logs: $DEVBOX_DIR/logs/vite-${proj//\//_}-${port}.log"
